@page "/counter"
@using Purchase.Data
@using Purchase.Services
@using Blazorise.DataGrid
@inject IMyService PurchaseService
@using System.ComponentModel
@using Blazorise

<PageTitle>Table</PageTitle>

<h1>Таблица</h1>

<ToolBar>
    <ToolBarItem>
        <Button Color="Color.Primary" @onclick="ShowCreateModal">Добавить</Button>
    </ToolBarItem>
    <ToolBarItem>
        <Button Color="Color.Warning" @onclick="ShowEditModal">Изменить</Button>
    </ToolBarItem>
    <ToolBarItem>
        <Button Color="Color.Danger" @onclick="ShowDeleteModal">Удалить</Button>
    </ToolBarItem>
</ToolBar>

<!-- Поле для поиска -->
<input type="text" class="textbox" placeholder="Поиск" @bind="searchText" />

@if (proposals == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DataGrid TItem="Proposal" Data="@proposals" ShowPager="true" PageSize="5" Striped="true" Bordered="true" Editable="true" EditMode="DataGridEditMode.Popup">
        <DataGridColumns>
            <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.ID)" Caption="ID" Sortable="true" />
            <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Number)" Caption="Номер" />
            <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.DateCreation)" Caption="Дата создания" Sortable="true">
                <DisplayTemplate>
                    @context.DateCreation.ToString("dd.MM.yyyy")
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Category)" Caption="Категория" Editable="true" />
            <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Author)" Caption="Автор" Editable="true" />
            <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Department)" Caption="Отдел" Editable="true" />
            <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Status)" Caption="Статус" Editable="true" />
        </DataGridColumns>
    </DataGrid>
}

<!-- Модальное окно для создания записи -->
<Modal @bind-Visible="isCreateModalVisible">
    <ModalHeader>Создать новую заявку</ModalHeader>
    <ModalBody>
        <label>Автор:</label>
        <InputText @bind-Value="author" />

        <label>Категория:</label>
        <Select TValue="Category" @bind-Value="selectedCategory">
            @foreach (var category in Enum.GetValues<Category>())
            {
                <SelectItem Value="@category">@category.GetDescription()</SelectItem>
            }
        </Select>

        <label>Отдел:</label>
        <Select TValue="Department" @bind-Value="selectedDepartment">
            @foreach (var department in Enum.GetValues<Department>())
            {
                <SelectItem Value="@department">@department.GetDescription()</SelectItem>
            }
        </Select>

        <label>Статус:</label>
        <Select TValue="StatusText" @bind-Value="statusText">
            @foreach (var status in Enum.GetValues<StatusText>())
            {
                <SelectItem Value="@status">@status.GetDescription()</SelectItem>
            }
        </Select>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" @onclick="Create">Сохранить</Button>
        <Button Color="Color.Secondary" @onclick="() => isCreateModalVisible = false">Закрыть</Button>
    </ModalFooter>
</Modal>

<!-- Модальное окно для удаления записи -->
<Modal @bind-Visible="isDeleteModalVisible">
    <ModalHeader>Удалить заявку</ModalHeader>
    <ModalBody>
        <label>Введите ID заявки:</label>
        <InputText @bind-Value="del" />
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Danger" @onclick="Delete">Удалить</Button>
        <Button Color="Color.Secondary" @onclick="() => isDeleteModalVisible = false">Отмена</Button>
    </ModalFooter>
</Modal>

<!-- Модальное окно для редактирования записи -->
<Modal @bind-Visible="isEditModalVisible">
    <ModalHeader>Редактировать заявку</ModalHeader>
    <ModalBody>
        <label>Автор:</label>
        <InputText @bind-Value="author" />

        <label>Категория:</label>
        <Select TValue="Category" @bind-Value="selectedCategory">
            @foreach (var category in Enum.GetValues<Category>())
            {
                <SelectItem Value="@category">@category.GetDescription()</SelectItem>
            }
        </Select>

        <label>Отдел:</label>
        <Select TValue="Department" @bind-Value="selectedDepartment">
            @foreach (var department in Enum.GetValues<Department>())
            {
                <SelectItem Value="@department">@department.GetDescription()</SelectItem>
            }
        </Select>

        <label>Статус:</label>
        <Select TValue="StatusText" @bind-Value="statusText">
            @foreach (var status in Enum.GetValues<StatusText>())
            {
                <SelectItem Value="@status">@status.GetDescription()</SelectItem>
            }
        </Select>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" @onclick="SaveEdit">Сохранить изменения</Button>
        <Button Color="Color.Secondary" @onclick="() => isEditModalVisible = false">Закрыть</Button>
    </ModalFooter>
</Modal>

@code {
    private string searchText = string.Empty;
    private List<Proposal> proposals;
    private string author;
    private Department selectedDepartment = Department.Department_A;
    private Category selectedCategory = Category.Category_1;
    private StatusText statusText = StatusText.InProgress;
    private string del;
    private bool isCreateModalVisible = false;
    private bool isDeleteModalVisible = false;
    private bool isEditModalVisible = false; 
    private int selectedProposalId;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        proposals = await PurchaseService.GetAllProposals();
    }

    private void ShowCreateModal()
    {
        isCreateModalVisible = true;
    }

    private void ShowDeleteModal()
    {
        isDeleteModalVisible = true;
    }

    private void ShowEditModal()
    {
        isEditModalVisible = true;
    }

    private async Task Create()
    {
        var newProposal = new Proposal
        {
            Author = author,
            Category = selectedCategory.GetDescription(),
            Department = selectedDepartment.GetDescription(),
            Status = statusText.GetDescription(),
            Number = proposals.Count == 0 ? 1 : proposals.Max(p => p.Number) + 1,
            DateCreation = DateTime.Now
        };

        if (string.IsNullOrWhiteSpace(newProposal.Author)) return;

        await PurchaseService.Create(newProposal);
        author = string.Empty;
        isCreateModalVisible = false;
        await LoadData();
    }

    private async Task Delete()
    {
        if (string.IsNullOrWhiteSpace(del)) return;
        await PurchaseService.Delete(Convert.ToInt32(del));
        isDeleteModalVisible = false;
        await LoadData();
    }

    private void Edit(int proposalId)
    {
        var proposalToEdit = proposals.FirstOrDefault(p => p.ID == proposalId);
        if (proposalToEdit != null)
        {
            selectedProposalId = proposalId;
            author = proposalToEdit.Author;
            selectedCategory = Enum.Parse<Category>(proposalToEdit.Category);
            selectedDepartment = Enum.Parse<Department>(proposalToEdit.Department);
            statusText = Enum.Parse<StatusText>(proposalToEdit.Status);
            isEditModalVisible = true;
        }
    }

    private async Task SaveEdit()
    {
        if (selectedProposalId > 0)
        {
            var proposalToUpdate = proposals.FirstOrDefault(p => p.ID == selectedProposalId);

            if (proposalToUpdate != null)
            {
                // Обновляем свойства
                proposalToUpdate.Author = author;
                proposalToUpdate.Category = selectedCategory.GetDescription();
                proposalToUpdate.Department = selectedDepartment.GetDescription();
                proposalToUpdate.Status = statusText.GetDescription();

                // Вызываем метод обновления
                await PurchaseService.Update(proposalToUpdate);
                isEditModalVisible = false;
                await LoadData(); // Перезагружаем данные для обновления отображения
            }
        }
    }
}