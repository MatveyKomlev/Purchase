@page "/proposal-category"
@inject IProposalCategoryService ProposalCategoryService

@using Blazorise
@using Purchase.Data
@using Purchase.Services

<PageTitle>Proposal Categories</PageTitle>

<h3>Категории предложений</h3>

<DataGrid TItem="ProposalCategory" Data="@categories" Bordered="true" Striped="true" Hoverable="true">
    <DataGridColumns>
        <DataGridColumn TItem="ProposalCategory" Field="@nameof(ProposalCategory.Title)" Caption="Название" />
        <DataGridColumn TItem="ProposalCategory" Field="@nameof(ProposalCategory.Material)" Caption="Материал" />
        <DataGridColumn TItem="ProposalCategory" Field="@nameof(ProposalCategory.Status)" Caption="Статус" />

        <DataGridColumn TItem="ProposalCategory" TextAlignment="TextAlignment.Center" Filterable="false" Sortable="false">
            <DisplayTemplate>
                @{
                    var approved = (context.Status == "Approved");
                }
                <Button Color="Color.Danger" Size="Size.Small" Hidden="@approved"
                        @onclick="() => ShowDeleteExclaimer(context)">
                    Удалить
                </Button>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

<Modal @ref="deleteModal" Title="Удалить категорию">
    <ModalBody>
        Вы уверены, что хотите удалить категорию "@selectedCategory?.Title"?
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Secondary" @onclick="CloseDeleteModal">Отмена</Button>
        <Button Color="Color.Danger" @onclick="DeleteCategory">Удалить</Button>
    </ModalFooter>
</Modal>

@code {
    private List<ProposalCategory> categories;
    private ProposalCategory selectedCategory;

    private Modal deleteModal;

    protected override async Task OnInitializedAsync()
    {
        categories = await ProposalCategoryService.GetAllCategories();
    }

    private void ShowDeleteExclaimer(ProposalCategory category)
    {
        selectedCategory = category;
        deleteModal.Show();
    }

    private void CloseDeleteModal()
    {
        deleteModal.Hide();
    }

    private async Task DeleteCategory()
    {
        if (selectedCategory != null)
        {
            await ProposalCategoryService.DeleteCategory(selectedCategory.ID);
            categories = await ProposalCategoryService.GetAllCategories(); // Обновляем список категорий
            CloseDeleteModal();
        }
    }
}
