@page "/proposal"
@using Purchase.Data
@using Purchase.Services
@using Blazorise.DataGrid
@inject IMyService PurchaseService
@using System.ComponentModel
@using Blazorise

<PageTitle>Applications</PageTitle>

<h1>Заявки</h1>

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light">
    <BarBrand>Управление заявками</BarBrand>
    <BarMenu>
        <BarEnd>
            <BarItem>
                <Button Color="Color.Primary" Clicked="ShowCreateModal">Создать</Button>
            </BarItem>
        </BarEnd>
    </BarMenu>
</Bar>

<DataGrid TItem="Proposal"
          Data="proposals"
          @ref="dataGrid"
          Editable="false"
          ShowPager="true"
          PageSize="10">
    <DataGridColumns>
        <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.ID)" Caption="ID" />
        <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Number)" Caption="Номер заявки" />
        <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.DateCreation)" Caption="Дата создания" />
        <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Category)" Caption="Категория" />
        <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Author)" Caption="Автор" />
        <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Department)" Caption="Отдел" />
        <DataGridColumn TItem="Proposal" Field="@nameof(Proposal.Status)" Caption="Статус" />

        <DataGridColumn TextAlignment="TextAlignment.Center" Filterable="false" Sortable="false">
            <DisplayTemplate>
                @{
                    var proposal = context as Proposal;
                    var approved = proposal?.Status == ErpStatus.Approved.ToString();
                }

                <Button Color="Color.Warning"
                        Size="Size.Small"
                        Hidden="@approved"
                        Clicked="@(() => ShowEditModal((Proposal)context))">
                    Изменить
                </Button>
            </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn TextAlignment="TextAlignment.Center" Filterable="false" Sortable="false">
            <DisplayTemplate>
                @{
                    var proposal = context as Proposal;
                    var approved = proposal?.Status == ErpStatus.Approved.ToString();
                }

                <Button Color="Color.Danger"
                        Size="Size.Small"
                        Hidden="@approved"
                        Clicked="@(() => DeleteProposal(((Proposal)context).ID))">
                    Удалить
                </Button>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

<Modal @bind-Visible="isModalVisible">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>@(isEdit ? "Редактировать заявку" : "Создать заявку")</ModalTitle>
            <Button CloseButton Clicked="() => isModalVisible = false" />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations">
                <TextEdit @bind-Text="proposalModel.Author" Placeholder="Автор" />
                <TextEdit @bind-Text="proposalModel.Department" Placeholder="Отдел" />
                <TextEdit @bind-Text="proposalModel.Category" Placeholder="Категория" />
                <Select TValue="string" @bind-SelectedValue="proposalModel.Status">
                    @foreach (var status in Enum.GetValues<ErpStatus>())
                    {
                        <SelectItem Value="@status.ToString()">@status.GetName()</SelectItem>
                    }
                </Select>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="SaveProposal">Сохранить</Button>
            <Button Color="Color.Secondary" Clicked="() => isModalVisible = false">Отмена</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<Proposal> proposals = new();
    private Proposal proposalModel = new();
    private bool isModalVisible = false;
    private bool isEdit = false;
    private Validations? validations;
    private DataGrid<Proposal>? dataGrid;

    protected override async Task OnInitializedAsync()
    {
        await LoadProposals();
    }

    private async Task LoadProposals()
    {
        proposals = await PurchaseService.GetAllProposals();
    }

    private void ShowCreateModal()
    {
        proposalModel = new Proposal
        {
            DateCreation = DateTime.Now,
                Status = ErpStatus.InProgress.ToString()
        };
        isEdit = false;
        isModalVisible = true;
    }

    private void ShowEditModal(Proposal proposal)
    {
        proposalModel = new Proposal
        {
            ID = proposal.ID,
            Author = proposal.Author,
            Category = proposal.Category,
            Department = proposal.Department,
            DateCreation = proposal.DateCreation,
            Status = proposal.Status,
            Number = proposal.Number
        };
        isEdit = true;
        isModalVisible = true;
    }

    private async Task SaveProposal()
    {
        if (await validations!.ValidateAll())
        {
            if (isEdit)
                await PurchaseService.Update(proposalModel);
            else
                await PurchaseService.Create(proposalModel);

            isModalVisible = false;
            await LoadProposals();
        }
    }

    private async Task DeleteProposal(int id)
    {
        await PurchaseService.Delete(id);
        await LoadProposals();
    }
}
